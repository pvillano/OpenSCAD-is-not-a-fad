// Generated by SolidPython 0.4.6 on 2020-05-18 14:57:11
$fa = .01;
$fs = 0.3;


union() {
	rotate(a = [0, 0, 0.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 18.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 36.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 54.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 72.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 90.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 108.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 126.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 144.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 162.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 180.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 198.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 216.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 234.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 252.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 270.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 288.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 306.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 324.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
	rotate(a = [0, 0, 342.0000000000]) {
		translate(v = [0.5000000000, 0, 0]) {
			rotate(a = [45, 0, 0]) {
				rotate_extrude(angle = 360) {
					translate(v = [1, 0, 0]) {
						circle(r = 0.0500000000);
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import os
from os.path import join as path_join
from typing import Iterable

from solid import *
from solid.utils import *


def line(
        a: Tuple[float, float, float],
        b: Tuple[float, float, float],
        r: float = 1.0,
        capped=True,
):
    if capped:
        return hull()(translate(a)(sphere(r=r)), translate(b)(sphere(r=r)))
    else:
        return hull()(
            hull()(translate(a)(sphere(r=r)), translate(b)(sphere(r=r)))
            - translate(a)(sphere(r=r))
            - translate(b)(sphere(r=r))
        )


def mix(p1: Tuple[float, float, float], p2: Tuple[float, float, float], a: float):
    if len(p1) != len(p2):
        raise IndexError()
    return tuple((x * (1 - a)) + (y * a) for x, y in zip(p1, p2))


def pairwise_hull(objs: Iterable[OpenSCADObject]):
    return sum(hull()(a, b) for a, b in zip(objs, objs[1:]))


def generate_part(part, partname, resolution=0.1):
    if not os.path.exists("generated"):
        os.makedirs("generated")
    scad_render_to_file(
        part,
        path_join("generated", f"{partname}.scad"),
        file_header=f"$fa = .01;\n$fs = {resolution};\n",
    )


standard_pips = (
    (
        (0, 0),
    ),
    (
        (-1, -1),
        (1, 1),
    ),
    (
        (-1, -1),
        (0, 0),
        (1, 1),
    ),
    (
        (-1, -1),
        (-1, 1),
        (1, -1),
        (1, 1),
    ),
    (
        (-1, -1),
        (-1, 1),
        (0, 0),
        (1, -1),
        (1, 1),
    ),
    (
        (-1, -1),
        (-1, 0),
        (-1, 1),
        (1, -1),
        (1, 0),
        (1, 1),
    ),
)

PHI = (1 + 5**.5)/2

phi = 1/PHI

def torus(major_r, minor_r, resolution):
    return rotate_extrude()(translate((major_r, 0, 0))(circle(minor_r)))


__all__ = ["line", "mix", "pairwise_hull", "generate_part", "standard_pips", "torus", "PHI", "phi"]
 
 
************************************************/
