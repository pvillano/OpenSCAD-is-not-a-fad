// Generated by SolidPython 0.4.6 on 2020-02-10 21:00:04
$fa = .01;
$fs = 0.05;


color(c = "red") {
	scale(v = [10.0000000000, 10.0000000000, 10.0000000000]) {
		union() {
			translate(v = [1.0000000000, 0.0000000000, -0.7071067812]) {
				sphere(r = 0.1650000000);
			}
			hull() {
				difference() {
					hull() {
						translate(v = [0.0825000000, 0.9175000000, 0.5904341623]) {
							sphere(r = 0.1650000000);
						}
						translate(v = [0.1650000000, 0.8350000000, 0.4737615434]) {
							sphere(r = 0.1650000000);
						}
					}
					translate(v = [0.0825000000, 0.9175000000, 0.5904341623]) {
						sphere(r = 0.1650000000);
					}
					translate(v = [0.1650000000, 0.8350000000, 0.4737615434]) {
						sphere(r = 0.1650000000);
					}
				}
			}
			hull() {
				difference() {
					hull() {
						translate(v = [0.0000000000, 0.8350000000, 0.7071067812]) {
							sphere(r = 0.1650000000);
						}
						translate(v = [0.0000000000, 0.6700000000, 0.7071067812]) {
							sphere(r = 0.1650000000);
						}
					}
					translate(v = [0.0000000000, 0.8350000000, 0.7071067812]) {
						sphere(r = 0.1650000000);
					}
					translate(v = [0.0000000000, 0.6700000000, 0.7071067812]) {
						sphere(r = 0.1650000000);
					}
				}
			}
			hull() {
				difference() {
					hull() {
						translate(v = [0.0000000000, -0.8350000000, 0.7071067812]) {
							sphere(r = 0.1650000000);
						}
						translate(v = [0.0000000000, -0.6700000000, 0.7071067812]) {
							sphere(r = 0.1650000000);
						}
					}
					translate(v = [0.0000000000, -0.8350000000, 0.7071067812]) {
						sphere(r = 0.1650000000);
					}
					translate(v = [0.0000000000, -0.6700000000, 0.7071067812]) {
						sphere(r = 0.1650000000);
					}
				}
			}
			hull() {
				difference() {
					hull() {
						translate(v = [-0.0825000000, -0.9175000000, 0.5904341623]) {
							sphere(r = 0.1650000000);
						}
						translate(v = [-0.1650000000, -0.8350000000, 0.4737615434]) {
							sphere(r = 0.1650000000);
						}
					}
					translate(v = [-0.0825000000, -0.9175000000, 0.5904341623]) {
						sphere(r = 0.1650000000);
					}
					translate(v = [-0.1650000000, -0.8350000000, 0.4737615434]) {
						sphere(r = 0.1650000000);
					}
				}
			}
			translate(v = [0.0000000000, -1.0000000000, 0.7071067812]) {
				sphere(r = 0.1650000000);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *

from rocky_common import *


a0 = (1.0, 0.0, -sqrt(.5))
a1 = (0.0, 1.0, sqrt(.5))
b0 = (-1.0, 0.0, -sqrt(.5))
b1 = (0.0, -1.0, sqrt(.5))


def d4_twist():
    out = []
    thickness = 3
    size = 20
    minscale = .05
    for i in range(int(1 / minscale) + 1):
        i = i / int(1 / minscale)
        out.append(line(mix(a0, a1, i), mix(b0, b1, i), thickness / size))

    body = scale((size / 2,) * 3)(pairwise_hull(out))
    pip_r = 1.1 * thickness / size
    pip_sphere = sphere(r=pip_r)

    def pip_line(a, b):
        return line(mix(a, b, .5 * pip_r), mix(a, b, 1.0 * pip_r), r=pip_r, capped=False)

    pips = color('red')(scale((size / 2,) * 3)(
        translate(a0)(pip_sphere)
        + pip_line(a1, a0)
        + pip_line(a1, b1)
        + pip_line(b1, a1)
        + pip_line(b1, b0)
        + translate(b1)(pip_sphere)
    ))

    out = (body - pips) + pips

    scad_render_to_file(body + pips, 'd4_twist.scad', file_header=f'$fa = .01;\n$fs = {minscale};\n')
    scad_render_to_file(body - pips, 'd4_twist_body.scad', file_header=f'$fa = .01;\n$fs = {minscale};\n')
    scad_render_to_file(pips, 'd4_twist_pips.scad', file_header=f'$fa = .01;\n$fs = {minscale};\n')


if __name__ == '__main__':
    d4_twist()
 
 
************************************************/
