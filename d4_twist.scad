// Generated by SolidPython 0.4.6 on 2020-02-08 17:55:44
$fa = .01;
$fs = 1;


scale(v = [10.0000000000, 10.0000000000, 10.0000000000]) {
	union() {
		hull() {
			hull() {
				translate(v = [1.0000000000, 0.0000000000, -0.7071067812]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-1.0000000000, 0.0000000000, -0.7071067812]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.9500000000, 0.0500000000, -0.6363961031]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.9500000000, -0.0500000000, -0.6363961031]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.9500000000, 0.0500000000, -0.6363961031]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.9500000000, -0.0500000000, -0.6363961031]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.9000000000, 0.1000000000, -0.5656854249]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.9000000000, -0.1000000000, -0.5656854249]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.9000000000, 0.1000000000, -0.5656854249]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.9000000000, -0.1000000000, -0.5656854249]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.8500000000, 0.1500000000, -0.4949747468]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.8500000000, -0.1500000000, -0.4949747468]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.8500000000, 0.1500000000, -0.4949747468]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.8500000000, -0.1500000000, -0.4949747468]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.8000000000, 0.2000000000, -0.4242640687]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.8000000000, -0.2000000000, -0.4242640687]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.8000000000, 0.2000000000, -0.4242640687]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.8000000000, -0.2000000000, -0.4242640687]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.7500000000, 0.2500000000, -0.3535533906]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.7500000000, -0.2500000000, -0.3535533906]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.7500000000, 0.2500000000, -0.3535533906]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.7500000000, -0.2500000000, -0.3535533906]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.7000000000, 0.3000000000, -0.2828427125]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.7000000000, -0.3000000000, -0.2828427125]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.7000000000, 0.3000000000, -0.2828427125]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.7000000000, -0.3000000000, -0.2828427125]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.6500000000, 0.3500000000, -0.2121320344]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.6500000000, -0.3500000000, -0.2121320344]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.6500000000, 0.3500000000, -0.2121320344]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.6500000000, -0.3500000000, -0.2121320344]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.6000000000, 0.4000000000, -0.1414213562]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.6000000000, -0.4000000000, -0.1414213562]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.6000000000, 0.4000000000, -0.1414213562]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.6000000000, -0.4000000000, -0.1414213562]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.5500000000, 0.4500000000, -0.0707106781]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.5500000000, -0.4500000000, -0.0707106781]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.5500000000, 0.4500000000, -0.0707106781]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.5500000000, -0.4500000000, -0.0707106781]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.5000000000, 0.5000000000, 0.0000000000]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.5000000000, -0.5000000000, 0.0000000000]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.5000000000, 0.5000000000, 0.0000000000]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.5000000000, -0.5000000000, 0.0000000000]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.4500000000, 0.5500000000, 0.0707106781]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.4500000000, -0.5500000000, 0.0707106781]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.4500000000, 0.5500000000, 0.0707106781]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.4500000000, -0.5500000000, 0.0707106781]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.4000000000, 0.6000000000, 0.1414213562]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.4000000000, -0.6000000000, 0.1414213562]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.4000000000, 0.6000000000, 0.1414213562]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.4000000000, -0.6000000000, 0.1414213562]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.3500000000, 0.6500000000, 0.2121320344]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.3500000000, -0.6500000000, 0.2121320344]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.3500000000, 0.6500000000, 0.2121320344]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.3500000000, -0.6500000000, 0.2121320344]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.3000000000, 0.7000000000, 0.2828427125]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.3000000000, -0.7000000000, 0.2828427125]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.3000000000, 0.7000000000, 0.2828427125]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.3000000000, -0.7000000000, 0.2828427125]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.2500000000, 0.7500000000, 0.3535533906]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.2500000000, -0.7500000000, 0.3535533906]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.2500000000, 0.7500000000, 0.3535533906]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.2500000000, -0.7500000000, 0.3535533906]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.2000000000, 0.8000000000, 0.4242640687]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.2000000000, -0.8000000000, 0.4242640687]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.2000000000, 0.8000000000, 0.4242640687]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.2000000000, -0.8000000000, 0.4242640687]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.1500000000, 0.8500000000, 0.4949747468]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.1500000000, -0.8500000000, 0.4949747468]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.1500000000, 0.8500000000, 0.4949747468]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.1500000000, -0.8500000000, 0.4949747468]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.1000000000, 0.9000000000, 0.5656854249]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.1000000000, -0.9000000000, 0.5656854249]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.1000000000, 0.9000000000, 0.5656854249]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.1000000000, -0.9000000000, 0.5656854249]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.0500000000, 0.9500000000, 0.6363961031]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.0500000000, -0.9500000000, 0.6363961031]) {
					sphere(r = 0.3000000000);
				}
			}
		}
		hull() {
			hull() {
				translate(v = [0.0500000000, 0.9500000000, 0.6363961031]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [-0.0500000000, -0.9500000000, 0.6363961031]) {
					sphere(r = 0.3000000000);
				}
			}
			hull() {
				translate(v = [0.0000000000, 1.0000000000, 0.7071067812]) {
					sphere(r = 0.3000000000);
				}
				translate(v = [0.0000000000, -1.0000000000, 0.7071067812]) {
					sphere(r = 0.3000000000);
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *


def line(a, b, r=1.0):
    return hull()(
        translate(a)(sphere(r=r)),
        translate(b)(sphere(r=r))
    )


def mix(p1, p2, a):
    if len(p1) != len(p2):
        raise IndexError()
    return [(x * (1-a)) + (y * a) for x, y in zip(p1, p2)]


def pairwise_hull(objs):
    return sum(hull()(a,b) for a,b in zip(objs, objs[1:]))


a0 = [ 1,  0, -sqrt(.5)]
a1 = [ 0,  1,  sqrt(.5)]
b0 = [-1,  0, -sqrt(.5)]
b1 = [ 0, -1,  sqrt(.5)]

def d4_twist():
    out = []
    thickness = 6
    size = 20
    minscale = 1
    for i in range(int(size/minscale) + 1):
        i = i/int(size/minscale)
        out.append(line(mix(a0, a1, i),mix(b0, b1, i), thickness/size))

    out = scale([size/2] * 3)(pairwise_hull(out))

    scad_render_to_file(out, 'd4_twist.scad', file_header=f'$fa = .01;\n$fs = {minscale};\n')


if __name__ == '__main__':
    d4_twist() 
 
************************************************/
