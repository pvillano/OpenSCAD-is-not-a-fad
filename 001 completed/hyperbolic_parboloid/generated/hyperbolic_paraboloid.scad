// Generated by SolidPython 0.4.6 on 2020-03-01 22:54:05
$fa = .01;
$fs = 0.3;


union() {
	rotate_extrude(angle = 360) {
		translate(v = [13.3333333333, 0, 0]) {
			circle(r = 0.7500000000);
		}
	}
	translate(v = [0, 0, 40]) {
		rotate_extrude(angle = 360) {
			translate(v = [8.0000000000, 0, 0]) {
				circle(r = 0.7500000000);
			}
		}
	}
	hull() {
		translate(v = [8.0000000000, 0.0000000000, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-8.7314764526, 10.0766609914, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [8.0000000000, 0.0000000000, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-8.7314764526, -10.0766609914, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [6.7300282626, 4.3251265396, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-12.7932396482, 3.7564340912, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [6.7300282626, 4.3251265396, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-1.8975311770, -13.1976192251, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [3.3233201040, 7.2770559628, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-12.7932396482, -3.7564340912, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [3.3233201040, 7.2770559628, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [5.5388668400, -12.1284266047, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-1.1385187062, 7.9185715350, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-8.7314764526, -10.0766609914, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-1.1385187062, 7.9185715350, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [11.2167137711, -7.2085442327, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-5.2388858716, 6.0459965948, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-1.8975311770, -13.1976192251, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-5.2388858716, 6.0459965948, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [13.3333333333, 0.0000000000, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-7.6759437889, 2.2538604547, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [5.5388668400, -12.1284266047, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-7.6759437889, 2.2538604547, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [11.2167137711, 7.2085442327, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-7.6759437889, -2.2538604547, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [11.2167137711, -7.2085442327, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-7.6759437889, -2.2538604547, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [5.5388668400, 12.1284266047, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-5.2388858716, -6.0459965948, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [13.3333333333, -0.0000000000, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-5.2388858716, -6.0459965948, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-1.8975311770, 13.1976192251, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-1.1385187062, -7.9185715350, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [11.2167137711, 7.2085442327, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [-1.1385187062, -7.9185715350, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-8.7314764526, 10.0766609914, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [3.3233201040, -7.2770559628, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [5.5388668400, 12.1284266047, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [3.3233201040, -7.2770559628, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-12.7932396482, 3.7564340912, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [6.7300282626, -4.3251265396, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-1.8975311770, 13.1976192251, 0]) {
			sphere(r = 0.7500000000);
		}
	}
	hull() {
		translate(v = [6.7300282626, -4.3251265396, 40]) {
			sphere(r = 0.7500000000);
		}
		translate(v = [-12.7932396482, -3.7564340912, 0]) {
			sphere(r = 0.7500000000);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import os
from os.path import join as path_join
from typing import Iterable

from solid import *
from solid.utils import *


def line(
        a: Tuple[float, float, float],
        b: Tuple[float, float, float],
        r: float = 1.0,
        capped=True,
):
    if capped:
        return hull()(translate(a)(sphere(r=r)), translate(b)(sphere(r=r)))
    else:
        return hull()(
            hull()(translate(a)(sphere(r=r)), translate(b)(sphere(r=r)))
            - translate(a)(sphere(r=r))
            - translate(b)(sphere(r=r))
        )


def mix(p1: Tuple[float, float, float], p2: Tuple[float, float, float], a: float):
    if len(p1) != len(p2):
        raise IndexError()
    return tuple((x * (1 - a)) + (y * a) for x, y in zip(p1, p2))


def pairwise_hull(objs: Iterable[OpenSCADObject]):
    return sum(hull()(a, b) for a, b in zip(objs, objs[1:]))


def generate_part(part, partname, resolution=0.1):
    if not os.path.exists("generated"):
        os.makedirs("generated")
    scad_render_to_file(
        part,
        path_join("generated", f"{partname}.scad"),
        file_header=f"$fa = .01;\n$fs = {resolution};\n",
    )


standard_pips = (
    (
        (0, 0),
    ),
    (
        (-1, -1),
        (1, 1),
    ),
    (
        (-1, -1),
        (0, 0),
        (1, 1),
    ),
    (
        (-1, -1),
        (-1, 1),
        (1, -1),
        (1, 1),
    ),
    (
        (-1, -1),
        (-1, 1),
        (0, 0),
        (1, -1),
        (1, 1),
    ),
    (
        (-1, -1),
        (-1, 0),
        (-1, 1),
        (1, -1),
        (1, 0),
        (1, 1),
    ),
)


def torus(major_r, minor_r, resolution):
    return rotate_extrude()(translate((major_r, 0, 0))(circle(minor_r)))


__all__ = ["line", "mix", "pairwise_hull", "generate_part", "standard_pips", "torus"]
 
 
************************************************/
